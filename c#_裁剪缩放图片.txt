using System;  
using System.Collections.Generic;  
using System.Text;  
using System.Drawing;  
using System.Drawing.Drawing2D;  
using System.Drawing.Imaging;  
  
namespace Project  
{  
    class ImageOperation  
    {  
        /// <summary>  
        ///  Resize图片   
        /// </summary>  
        /// <param name="bmp">原始Bitmap </param>  
        /// <param name="newW">新的宽度</param>  
        /// <param name="newH">新的高度</param>  
        /// <param name="Mode">保留着，暂时未用</param>  
        /// <returns>处理以后的图片</returns>  
  
        public static Bitmap ResizeImage(Bitmap bmp, int newW, int newH, int Mode)  
        {  
            try  
            {  
                Bitmap b = new Bitmap(newW, newH);  
                Graphics g = Graphics.FromImage(b);  
                // 插值算法的质量   
                g.InterpolationMode = InterpolationMode.HighQualityBicubic;  
                g.DrawImage(bmp, new Rectangle(0, 0, newW, newH), new Rectangle(0, 0, bmp.Width, bmp.Height), GraphicsUnit.Pixel);  
                g.Dispose();  
                return b;  
            }  
            catch  
            {  
                return null;  
            }  
        }  
        /// <summary>  
        /// 剪裁 -- 用GDI+   
        /// </summary>  
        /// <param name="b">原始Bitmap</param>  
        /// <param name="StartX">开始坐标X</param>  
        /// <param name="StartY">开始坐标Y</param>  
        /// <param name="iWidth">宽度</param>  
        /// <param name="iHeight">高度</param>  
        /// <returns>剪裁后的Bitmap</returns>  
        public static Bitmap Cut(Bitmap b, int StartX, int StartY, int iWidth, int iHeight)  
        {  
            if (b == null)  
            {  
                return null;  
            }  
            int w = b.Width;  
            int h = b.Height;  
            if (StartX >= w || StartY >= h)  
            {  
                return null;  
            }  
            if (StartX + iWidth > w)  
            {  
                iWidth = w - StartX;  
            }  
            if (StartY + iHeight > h)  
            {  
                iHeight = h - StartY;  
            }  
            try  
            {  
                Bitmap bmpOut = new Bitmap(iWidth, iHeight, PixelFormat.Format24bppRgb);  
                Graphics g = Graphics.FromImage(bmpOut);  
                g.DrawImage(b, new Rectangle(0, 0, iWidth, iHeight), new Rectangle(StartX, StartY, iWidth, iHeight), GraphicsUnit.Pixel);  
                g.Dispose();  
                return bmpOut;  
            }  
            catch  
            {  
                return null;  
            }  
        }  
    }  
}  